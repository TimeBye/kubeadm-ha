# 提权操作
ansible_become: true
#----------------------------------------------- 基础参数 -------------------------------------------------#
_host_architecture_groups:
  x86_64: amd64
  aarch64: arm64
  armv7l: arm
host_architecture: >-
  {%- if ansible_architecture in _host_architecture_groups -%}
  {{ _host_architecture_groups[ansible_architecture] }}
  {%- else -%}
  {{ ansible_architecture }}
  {%- endif -%}

_host_distribution_groups:
  uos: debian
host_distribution: >-
  {%- if ansible_distribution in _host_distribution_groups -%}
  {{ _host_distribution_groups[ansible_distribution] }}
  {%- else -%}
  {{ ansible_distribution }}
  {%- endif -%}

host_distribution_release: >-
  {%- if (ansible_distribution_release == 'n/a') or (ansible_distribution_release is not defined) or (ansible_distribution_release == '') -%}
  buster
  {%- else -%}
  {{ ansible_distribution_release }}
  {%- endif -%}

# 负载均衡模式(nginx openresty haproxy envoy slb)
lb_mode: nginx
# 经过负载后的apiserver端口号
lb_kube_apiserver_port: 8443
# 负载均衡器健康检查端口
lb_kube_apiserver_healthcheck_port: 8081
# Pod根容器
pod_infra_container_image: registry.aliyuncs.com/kubeadm-ha/pause:3.2
# Kubelet 根目录
kubelet_root_dir: "/var/lib/kubelet"

#---------------------------------------------- Openresty 相关参数 --------------------------------------------#
# 使用openresty进行apiserver负载时使用的nginx镜像
lb_openresty_image: registry.aliyuncs.com/kubeadm-ha/openresty_openresty:1.19.3.1-alpine

#---------------------------------------------- Nginx 相关参数 --------------------------------------------#
# 使用nginx进行apiserver负载时使用的nginx镜像
lb_nginx_image: registry.aliyuncs.com/kubeadm-ha/nginx:1.19-alpine

#--------------------------------------------- Haproxy 相关参数 --------------------------------------------#
# 使用haproxy进行apiserver负载时使用的haproxy镜像
lb_haproxy_image: registry.aliyuncs.com/kubeadm-ha/haproxy:2.3-alpine
# haproxy监控绑定端口
lb_haproxy_stats_bind_address: 9090
# haproxy监控访问路径
lb_haproxy_stats_uri: "/stats"
# haproxy监控自动刷新时间（秒）
lb_haproxy_stats_refresh: 10
# haproxy监控用户名
lb_haproxy_stats_user: "admin"
# haproxy监控用户密码
lb_haproxy_stats_password: "admin"
# haproxy负载均衡算法，常见如下：
# "roundrobin": 基于服务器权重的轮询
# "leastconn": 基于服务器最小连接数
# "source": 基于请求源IP地址
# "uri": 基于请求的URI
lb_haproxy_balance_alg: "leastconn"

#--------------------------------------------- Envoy 相关参数 --------------------------------------------#
# 使用haproxy进行apiserver负载时使用的haproxy镜像
lb_envoy_image: registry.aliyuncs.com/kubeadm-ha/envoyproxy_envoy:v1.16.2
lb_envoy_admin_address_port: 9090

#---------------------------------------------- Keepalived 相关参数 ---------------------------------------#
# Keepalived 提供的 VIPs
KUBE_APISERVER_IP: >-
  {% if lb_kube_apiserver_ip is not defined %}
    127.0.0.1
  {% else %}
    {{ lb_kube_apiserver_ip }}
  {% endif %}

# 使用 vip 负载时使用的 keepalived 镜像
lb_keepalived_image: registry.aliyuncs.com/kubeadm-ha/osixia_keepalived:2.0.20
# keepalived auth_type 的 password
lb_keepalived_password: "d0cker"
# 区分多个 instance 的 VRRP 组播，同网段不能重复，取值在0-255之间
lb_keepalived_router_id: 51
# 默认所有节点权重 120
LB_KEEPALIVED_PRIORITY: "120"
# 节点初始主备状态
LB_KEEPALIVED_STATE: "{% if inventory_hostname == groups['lb'][0] %}MASTER{% else %}BACKUP{% endif %}"
# 其他 Keepalived 节点的单点传播 IP
LB_KEEPALIVED_UNICAST_PEERS: "{% for host in groups['lb'] %}{% if hostvars[host]['ansible_host'] is defined %}'{{ hostvars[host]['ansible_host'] }}'{% else %}'{{ host }}'{% endif %}{% if not loop.last %},{% endif %}{% endfor %}"

# containerd 是否使用 systemd 作为 cgroup 驱动程序
containerd_use_systemd_cgroup: true

# 当前节点ip
CURRENT_HOST_IP: "{% if hostvars[inventory_hostname]['ansible_host'] is defined %}{{ hostvars[inventory_hostname]['ansible_host'] }}{% else %}{{ inventory_hostname }}{% endif %}"
# CRI socket path
CRI_SOCKET: >-
  {%- if container_manager_detected == 'containerd' -%}
  /var/run/containerd/containerd.sock
  {%- else -%}
  /var/run/dockershim.sock
  {%- endif -%}
# 镜像拉取命令
IMAGE_PULL_COMMAND: >-
  {%- if container_manager_detected == 'containerd' -%}
  crictl pull
  {%- else -%}
  docker pull
  {%- endif -%}
# kubelet 启动参数
KUBELET_ARGS_BASE: >-
  --address=127.0.0.1
  {% if container_manager_detected == 'containerd' %}
  --container-runtime=remote
  --container-runtime-endpoint=unix://{{ CRI_SOCKET }}
  {% else %}
  --pod-infra-container-image={{ pod_infra_container_image }}
  {% endif %}
  --root-dir={{ kubelet_root_dir }}
  --hostname-override={{ inventory_hostname }}
  --pod-manifest-path=/etc/kubernetes/manifests
  --cgroup-driver={{ kubelet_cgroup_driver|default(kubelet_cgroup_driver_detected) }}