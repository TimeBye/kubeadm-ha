name: Build base images
on:
  push:
    paths:
      - 'offline/default.conf'
      - 'offline/Dockerfile.base'
      - 'offline/download-yum.sh'
      - 'offline/download-images-to-registry.sh'
jobs:
  build:
    runs-on: ubuntu-20.04
    env:
      DOCKER_CLI_EXPERIMENTAL: enabled
    steps:
    - name: Set up Docker experimental
      run: |
        sudo apt-get update
        sudo apt-get install jq -y
        sudo curl -sSLo /usr/bin/mc https://dl.min.io/client/mc/release/linux-amd64/mc
        sudo chmod +x /usr/bin/mc
        echo $'{\n    "experimental": true\n}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Download yum for amd64
      run: |
        cd $GITHUB_WORKSPACE/offline
        docker system prune -a -f --volumes 
        docker run --rm \
        --platform linux/amd64 \
        -v $PWD:/offline \
        -w /offline \
        centos:7 \
        /bin/bash /offline/download-yum.sh amd64/kubernetes-yum
        cd amd64
        sudo mv docker-ce-20.10.7.tar.gz docker-ce-20.10.7-amd64.tar.gz
    - name: Download yum for arm64
      run: |
        cd $GITHUB_WORKSPACE/offline
        docker system prune -a -f --volumes 
        docker run --rm \
        --platform linux/arm64 \
        -v $PWD:/offline \
        -w /offline \
        centos:7 \
        /bin/bash /offline/download-yum.sh arm64/kubernetes-yum
        cd arm64
        sudo mv docker-ce-20.10.7.tar.gz docker-ce-20.10.7-arm64.tar.gz
    - name: Upload artifact to oss
      id: oss
      run: |
        mc alias set oss https://oss.choerodon.com.cn ${{ secrets.OSS_USERNAME }} ${{ secrets.OSS_TOKEN }}
        mc cp --json offline/amd64/docker-ce-20.10.7-amd64.tar.gz oss/kubeadm-ha 2>&1 | tee oss.log
        target=$(cat oss.log | jq -r 'select(.target)|.target')
        echo "::warning file=docker-ce-amd64::https://oss.choerodon.com.cn/${target#*/}"
        mc cp --json offline/arm64/docker-ce-20.10.7-arm64.tar.gz oss/kubeadm-ha 2>&1 | tee oss.log
        target=$(cat oss.log | jq -r 'select(.target)|.target')
        echo "::warning file=docker-ce-arm64::https://oss.choerodon.com.cn/${target#*/}"
    - name: Download images for amd64
      run: |
        cd $GITHUB_WORKSPACE/offline
        docker system prune -a -f --volumes
        docker run -d -p 5000:5000 --name registry \
        --platform linux/amd64 \
        -v $PWD/amd64/registry:/var/lib/registry \
        registry:2
        /bin/bash download-images-to-registry.sh
    - name: Download images for arm64
      run: |
        docker rm -f registry
        docker system prune -a -f --volumes
        cd $GITHUB_WORKSPACE/offline
        docker run -d -p 5000:5000 --name registry \
        --platform linux/arm64 \
        -v $PWD/arm64/registry:/var/lib/registry \
        registry:2
        /bin/bash download-images-to-registry.sh linux/arm64
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: offline
        file: offline/Dockerfile.base
        platforms: linux/amd64,linux/arm64
        push: true
        tags: setzero/kubeadm-ha:1.21.4-base
    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 7
        keep_minimum_runs: 3